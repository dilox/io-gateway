on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - '[0-9]*' # Push events to matching *, i.e. 1.0, 20.15.10

name: Release

jobs:
  build_mac:
    name: Mac Release
    runs-on: macOS-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: '1.15'
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Build
        env:
          DOCKER_TOKEN: ${{secrets.DOCKER_TOKEN}}
          DOCKER_USER: ${{secrets.DOCKER_USER}} 
        run: |
          make release_mac

      - name: Create Artifacts File
        id: mac_artifact
        run: |
          MACPATH=$(ls iogw/setup/mac/*.pkg)
          MACNAME=$(basename $MACPATH)
          MACBUILD=iogw/setup/mac/application/bin/iogw
          sudo ln -sf $MACPATH iogw.pkg
          sudo ln -sf $MACBUILD iogw.bin
          echo MACNAME=${MACNAME} > mac_variables.sh

      - name: Upload Release pkg file as Artifact
        uses: actions/upload-artifact@v1
        with:
          name: mac_artifact
          path: iogw.pkg

      - name: Upload Release bin file as Artifact
        uses: actions/upload-artifact@v1
        with:
          name: mac_artifact
          path: iogw.bin

      - name: Upload Release mac variables as Artifact
        uses: actions/upload-artifact@v1
        with:
          name: mac_artifact
          path: mac_variables.sh

  build:
    name: Windows and Linux Release
    runs-on: ubuntu-latest
    needs: build_mac
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Build
        id: build
        env:
          DOCKER_TOKEN: ${{secrets.DOCKER_TOKEN}}
          DOCKER_USER: ${{secrets.DOCKER_USER}}
        run: |
          bash setup.sh "$DOCKER_USER" "$DOCKER_TOKEN"
          source source-me-first
          sudo apt-get install -y alien
          make release_lin
          make release_win
          DEBPATH=$(ls iogw/setup/linux/deb/iogw_*.deb)
          DEBNAME=$(basename $DEBPATH)
          RPMPATH=$(ls iogw/setup/linux/rpm/iogw-*.rpm)
          RPMNAME=$(basename $RPMPATH)
          WINPATH=$(ls iogw/setup/windows/iogw-*.exe)
          WINNAME=$(basename $WINPATH)
          echo ::set-output name=deb_path::${DEBPATH}
          echo ::set-output name=deb_name::${DEBNAME}
          echo ::set-output name=rpm_path::${RPMPATH}
          echo ::set-output name=rpm_name::${RPMNAME}
          echo ::set-output name=win_path::${WINPATH}
          echo ::set-output name=win_name::${WINNAME}
          echo ::set-output name=lin_build::iogw/setup/linux/bin/iogw
          echo ::set-output name=win_build::iogw/setup/windows/iogw.exe

      - name: Download mac pkg Artifact
        uses: actions/download-artifact@v1
        with:
          name: mac_artifact


      - name: Set mac variables
        id: mac_variables
        run: |
          source mac_artifact/mac_variables.sh
          echo ::set-output name=mac_name::${MACNAME}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload .deb
        id: upload-release-deb-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ steps.build.outputs.deb_path }}
          asset_name: ${{ steps.build.outputs.deb_name }}
          asset_content_type: application/x-debian-package

      - name: Upload .rpm
        id: upload-release-rpm-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ steps.build.outputs.rpm_path }}
          asset_name: ${{ steps.build.outputs.rpm_name }}
          asset_content_type: application/x-redhat-package-manager

      - name: Upload .exe
        id: upload-release-win-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ steps.build.outputs.win_path }}
          asset_name: ${{ steps.build.outputs.win_name }}
          asset_content_type: application/octet-stream

      - name: Upload .pkg
        id: upload-release-mac-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: mac_artifact/iogw.pkg
          asset_name: ${{ steps.mac_variables.outputs.mac_name }}
          asset_content_type: application/x-newton-compatible-pkg

      - name: Upload linux
        id: upload-release-linux-exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ steps.build.outputs.lin_build }}
          asset_name: iogw_linux
          asset_content_type: application/octet-stream


      - name: Upload windows
        id: upload-release-windows-exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ steps.build.outputs.win_build }}
          asset_name: iogw_win.exe
          asset_content_type: application/octet-stream

      - name: Upload mac
        id: upload-release-mac-exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: mac_artifact/iogw.bin
          asset_name: iogw_mac
          asset_content_type: application/octet-stream
